name: CI

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ "**" ]

# # allow the job to push a commit
# permissions:
#   contents: write

# Cancel older runs on the same branch/PR to save CI minutes
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  tests:
    name: Unit tests (Python ${{ matrix.python-version }})
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        python-version: ["3.9", "3.10", "3.11", "3.12"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: pip

      - name: Upgrade pip
        run: python -m pip install -U pip

      # If you maintain a requirements-dev.txt, install that here instead of extras.
      - name: Install project (test/dev extras)
        run: pip install -e ".[test,dev]"

      - name: Install pytest toolchain
        run: pip install pytest pytest-xdist pytest-cov

      # Run tests (quiet by default; add -vv for debugging)
      - name: Run pytest (core)
        run: |
          pytest -q \
            --maxfail=1 \
            --disable-warnings \
            --cov=unifile \
            --cov-report=xml:coverage.xml \
            --cov-report=term

      - name: Upload coverage (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-core-py${{ matrix.python-version }}
          path: coverage.xml

  tests-media:
    name: Media tests (ASR/OCR mocks)
    runs-on: ubuntu-latest
    needs: tests   # run after core tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Upgrade pip
        run: python -m pip install -U pip

      # ffmpeg is used by helpers we mock; install anyway to mirror user envs
      - name: Install ffmpeg
        run: |
          sudo apt-get update
          sudo apt-get install -y ffmpeg

      - name: Install project (test/dev + media extras)
        run: pip install -e ".[test,dev,media]"

      - name: Install pytest toolchain
        run: pip install pytest pytest-xdist pytest-cov

      # Run the whole suite; media tests mock _ASR.transcribe and ffmpeg probes,
      # so no heavy models are pulled and the job stays fast.
      - name: Run pytest (media)
        env:
          # optional envs if you want deterministic paths in tests
          UNIFILE_ASR_MODEL: small
          UNIFILE_ASR_DEVICE: cpu
        run: |
          pytest -q \
            --maxfail=1 \
            --disable-warnings

  docs:
    name: Build Sphinx docs
    runs-on: ubuntu-latest
    needs: tests
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: "3.11"
          cache: pip

      - name: Upgrade pip
        run: python -m pip install -U pip

      - name: Install project (no heavy extras needed)
        run: pip install -e .

      - name: Install Sphinx toolchain
        run: |
          pip install sphinx furo sphinx-autodoc-typehints myst-parser

      - name: Build Sphinx HTML
        env:
          SPHINXOPTS: -W  # treat warnings as errors; remove if too strict
        run: |
          sphinx-build -b html docs docs/_build/html $SPHINXOPTS

      - name: Upload HTML docs (artifact)
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: docs-html
          path: docs/_build/html
