src.unifile.pipeline
====================

.. py:module:: src.unifile.pipeline

.. autoapi-nested-parse::

   Unified extraction pipeline.

   This module wires file extensions to concrete extractor implementations and exposes
   two key utilities:

   - ``detect_extractor(path)``: resolve the normalized extension and return it only
     if it's supported by the registry.
   - ``extract_to_table(...)``: run the appropriate extractor and return a
     standardized pandas DataFrame. The schema is:

       [source_path, source_name, file_type, unit_type, unit_id,
        content, char_count, metadata, status, error]

   Design notes
   -----------

   * The registry maps normalized lower-case extensions (without dots) to callables
     that return **new extractor instances**. This ensures extractors are stateless
     across calls.
   * ``extract_to_table`` accepts either a filesystem path or raw bytes plus a
     filename hint; in the latter case data is persisted to a temporary file so we
     can reuse file-based extractors uniformly.

   CLI-related runtime options
   --------------------------
   The pipeline can accept the same flags the CLI exposes:

   - OCR / PDF
     * ``ocr_lang`` (str): language code for OCR (images and PDF OCR fallback)
     * ``no_ocr`` (bool): disable OCR fallback for PDFs (vector text only)

   - ASR / Media (optional, if media extractors installed)
     * ``asr_model`` (str): ASR model name (e.g., "small")
     * ``asr_device`` (str): "cpu" or "cuda"
     * ``asr_compute_type`` (str): faster-whisper compute type (e.g., "float16")

   These are set via ``extract_to_table(..., ocr_lang=..., no_ocr=..., asr_* = ...)``
   and also exported to environment variables so optional media extractors can pick
   them up consistently:

   - UNIFILE_OCR_LANG
   - UNIFILE_DISABLE_PDF_OCR
   - UNIFILE_ASR_MODEL
   - UNIFILE_ASR_DEVICE
   - UNIFILE_ASR_COMPUTE_TYPE



Attributes
----------

.. autoapisummary::

   src.unifile.pipeline.INCLUDE_FILE_TYPES_COMPRESSED
   src.unifile.pipeline.INCLUDE_FILE_TYPES_MEDIA
   src.unifile.pipeline._RUNTIME
   src.unifile.pipeline.REGISTRY_BASE
   src.unifile.pipeline.REGISTRY
   src.unifile.pipeline.SUPPORTED_EXTENSIONS


Functions
---------

.. autoapisummary::

   src.unifile.pipeline._apply_runtime_env
   src.unifile.pipeline.set_runtime_options
   src.unifile.pipeline.detect_extractor
   src.unifile.pipeline._rows_to_df
   src.unifile.pipeline._apply_runtime_to_instance
   src.unifile.pipeline.extract_to_table


Module Contents
---------------

.. py:data:: INCLUDE_FILE_TYPES_COMPRESSED
   :value: True


.. py:data:: INCLUDE_FILE_TYPES_MEDIA
   :value: True


.. py:data:: _RUNTIME

.. py:function:: _apply_runtime_env()

   Export the current runtime configuration into environment variables so that
   extractors that read env (e.g., PdfExtractor, Audio/Video ASR backends) see
   consistent settings.


.. py:function:: set_runtime_options(*, ocr_lang: Optional[str] = None, no_ocr: Optional[bool] = None, asr_model: Optional[str] = None, asr_device: Optional[str] = None, asr_compute_type: Optional[str] = None) -> None

   Update in-process runtime options (mirrors CLI flags) and export to env.


.. py:data:: REGISTRY_BASE

.. py:data:: REGISTRY

.. py:data:: SUPPORTED_EXTENSIONS

.. py:function:: detect_extractor(path: Union[str, pathlib.Path]) -> Optional[str]

   Determine the extractor to use from a path-like object's extension.


.. py:function:: _rows_to_df(rows: List[unifile.extractors.base.Row]) -> pandas.DataFrame

   Convert a list of Row to the standardized pandas DataFrame.


.. py:function:: _apply_runtime_to_instance(extractor) -> None

   Best-effort: mutate known extractor attributes after construction so tests
   can monkeypatch REGISTRY and still have runtime options honored.


.. py:function:: extract_to_table(input_obj: Union[str, pathlib.Path, bytes], *, filename: Optional[str] = None, ocr_lang: Optional[str] = None, no_ocr: Optional[bool] = None, asr_model: Optional[str] = None, asr_device: Optional[str] = None, asr_compute_type: Optional[str] = None) -> pandas.DataFrame

   Extract text from a supported file and return a standardized pandas DataFrame.


