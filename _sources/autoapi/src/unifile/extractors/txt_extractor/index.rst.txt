src.unifile.extractors.txt_extractor
====================================

.. py:module:: src.unifile.extractors.txt_extractor


Classes
-------

.. autoapisummary::

   src.unifile.extractors.txt_extractor.TextExtractor


Module Contents
---------------

.. py:class:: TextExtractor

   Bases: :py:obj:`unifile.extractors.base.BaseExtractor`


   Plain-textâ€“style extractor for TXT/MD/RTF/LOG.

   This extractor reads the file as text (using Python's default encoding
   detection fallbacks via ``errors="replace"``) and emits a single
   standardized row.

   Inherits :meth:`BaseExtractor.extract` for path validation and
   exception-to-error-row wrapping. The actual file reading is implemented
   in :meth:`_extract`.

   Supported extensions
   --------------------
   txt, md, rtf, log

   Output Row
   ----------
   - file_type: normalized from the file suffix (e.g., "txt")
   - unit_type: "file"
   - unit_id:   "body"
   - content:   Full text of the file
   - metadata:  {"encoding": "auto"}

   .. admonition:: Notes

      - If you prefer more accurate encoding detection, wire in `chardet` or
        `charset-normalizer` and decode bytes manually before emitting rows.


   .. py:attribute:: supported_extensions
      :value: ['txt', 'md', 'rtf', 'log']



   .. py:method:: _extract(path: pathlib.Path) -> List[unifile.extractors.base.Row]

      Read a text-like file and return a single standardized row.

      :param path: Path to a supported text-like file. Existence checks are handled by
                   :class:`BaseExtractor.extract`.

      :returns: * *list[Row]* -- A single row with the file's text content.
                * *Error Handling*
                * *--------------*
                * *Any unexpected exception raised here would be wrapped by*
                * :meth:`BaseExtractor.extract` as a single error row. This method
                * *returns an explicit error row only when you want to customize the error*
                * *payload for known failure modes.*



