src.unifile.extractors.video_extractor
======================================

.. py:module:: src.unifile.extractors.video_extractor

.. autoapi-nested-parse::

   Video --> transcript extractor (optional).

   Strategy:
     - Extract/convert audio track to mono 16k WAV via ffmpeg
     - Feed WAV to the same ASR backend selection used by AudioExtractor

   Requirements (install optional extra):
       pip install ".[media]"

   Binary:
       FFmpeg must be available on PATH.



Classes
-------

.. autoapisummary::

   src.unifile.extractors.video_extractor.VideoExtractor


Functions
---------

.. autoapisummary::

   src.unifile.extractors.video_extractor._ffmpeg_audio
   src.unifile.extractors.video_extractor._probe_video


Module Contents
---------------

.. py:function:: _ffmpeg_audio(path: pathlib.Path) -> pathlib.Path

   Extract audio track to mono 16k WAV with ffmpeg.


.. py:function:: _probe_video(path: pathlib.Path) -> Dict[str, Any]

.. py:class:: VideoExtractor

   Bases: :py:obj:`unifile.extractors.base.BaseExtractor`


   Video --> transcript (audio track ASR).

   Supported extensions
   --------------------
   mp4, mov, mkv, webm

   Output Row
   ----------
   - file_type: normalized (e.g., "mp4")
   - unit_type: "video"
   - unit_id:   "0"
   - content:   transcription text (from the primary audio track)
   - metadata:  {"segments":[...], "probe":{...}}


   .. py:attribute:: supported_extensions
      :value: ['mp4', 'mov', 'mkv', 'webm']



   .. py:method:: _extract(path: pathlib.Path) -> List[unifile.extractors.base.Row]


