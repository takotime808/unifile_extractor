src.unifile.extractors.img_extractor
====================================

.. py:module:: src.unifile.extractors.img_extractor


Classes
-------

.. autoapisummary::

   src.unifile.extractors.img_extractor.ImageExtractor


Module Contents
---------------

.. py:class:: ImageExtractor(ocr_lang: str = 'eng')

   Bases: :py:obj:`unifile.extractors.base.BaseExtractor`


   Image --> text (OCR) extractor.

   This extractor opens an image, normalizes its mode for OCR, and uses
   Tesseract (via `pytesseract`) to extract text. It emits a single row with
   basic image metadata.

   Inherits :meth:`BaseExtractor.extract` for path validation and
   exception-to-error-row wrapping. The core logic lives in :meth:`_extract`.

   Supported extensions
   --------------------
   png, jpg, jpeg, tif, tiff, bmp, webp, gif

   Output Row
   ----------
   - file_type: normalized from the file suffix (e.g., "png")
   - unit_type: "image"
   - unit_id:   "0"
   - content:   OCR text (empty string if none)
   - metadata:  {"width": int, "height": int, "mode": str}


   .. py:attribute:: supported_extensions
      :value: ['png', 'jpg', 'jpeg', 'tif', 'tiff', 'bmp', 'webp', 'gif']



   .. py:attribute:: ocr_lang
      :value: 'eng'



   .. py:method:: _extract(path: pathlib.Path) -> List[unifile.extractors.base.Row]

      Perform OCR on the image at `path` and return a single standardized row.

      :param path: Path to a supported image file. Existence checks are handled by
                   :class:`BaseExtractor.extract`.

      :returns: A single row with OCR text and basic image metadata.
      :rtype: list[Row]



