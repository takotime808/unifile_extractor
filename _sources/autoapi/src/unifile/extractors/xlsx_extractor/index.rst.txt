src.unifile.extractors.xlsx_extractor
=====================================

.. py:module:: src.unifile.extractors.xlsx_extractor


Classes
-------

.. autoapisummary::

   src.unifile.extractors.xlsx_extractor.ExcelExtractor
   src.unifile.extractors.xlsx_extractor.CsvExtractor


Module Contents
---------------

.. py:class:: ExcelExtractor

   Bases: :py:obj:`unifile.extractors.base.BaseExtractor`


   XLSX/XLS --> plain-text (tab-delimited) extractor.

   This extractor loads a workbook and emits **one row per worksheet**. Each
   worksheet's cells are serialized as **tab-delimited** lines (one line per
   sheet row), which is convenient for downstream text processing.

   Inherits :meth:`BaseExtractor.extract` for path validation and
   exception-to-error-row wrapping. The actual spreadsheet reading is
   implemented in :meth:`_extract`.

   Supported extensions
   --------------------
   xlsx, xlsm, xltx, xltm, xls

   Output Row (per sheet)
   ----------------------
   - file_type: normalized from the file suffix (e.g., "xlsx")
   - unit_type: "sheet"
   - unit_id:   worksheet title
   - content:   Tab-delimited lines (one per spreadsheet row)
   - metadata:  {"nrows": int, "ncols": int}


   .. py:attribute:: supported_extensions
      :value: ['xlsx', 'xlsm', 'xltx', 'xltm', 'xls']



   .. py:method:: _extract(path: pathlib.Path) -> List[unifile.extractors.base.Row]

      Read a workbook and return standardized rows, one per worksheet.

      :param path: Path to an Excel workbook. Existence checks are handled by
                   :class:`BaseExtractor.extract`.

      :returns: Standardized rows for each worksheet.
      :rtype: list[Row]



.. py:class:: CsvExtractor

   Bases: :py:obj:`unifile.extractors.base.BaseExtractor`


   CSV/TSV --> plain-text (CSV serialization) extractor.

   This extractor reads a **CSV** or **TSV** into a pandas DataFrame and emits
   a single row whose `content` is the canonical CSV serialization
   (`df.to_csv(index=False)`), preserving headers and row order.

   Inherits :meth:`BaseExtractor.extract` for path validation and
   exception-to-error-row wrapping. The actual parsing is implemented in
   :meth:`_extract`.

   Supported extensions
   --------------------
   csv, tsv

   Output Row
   ----------
   - file_type: "csv" or "tsv"
   - unit_type: "table"
   - unit_id:   "0"
   - content:   CSV text (comma-separated; TSV is first read with tab sep)
   - metadata:  {"rows": int, "cols": int}


   .. py:attribute:: supported_extensions
      :value: ['csv', 'tsv']



   .. py:method:: _extract(path: pathlib.Path) -> List[unifile.extractors.base.Row]

      Parse a CSV/TSV file into a single standardized row.

      :param path: Path to a `.csv` or `.tsv` file. Existence checks are handled by
                   :class:`BaseExtractor.extract`.

      :returns: A single row with CSV text content and basic table metadata.
      :rtype: list[Row]



