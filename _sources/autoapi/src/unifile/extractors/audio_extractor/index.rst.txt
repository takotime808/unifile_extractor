src.unifile.extractors.audio_extractor
======================================

.. py:module:: src.unifile.extractors.audio_extractor

.. autoapi-nested-parse::

   Audio --> transcript extractor (optional).

   Backends (auto-selected at runtime):
   1) faster-whisper  (fastest, GPU-friendly if available)
   2) openai-whisper  (CPU works; slower)

   Requirements (install optional extra):
       pip install ".[media]"

   Binary:
       FFmpeg is recommended (for robust decoding across formats).



Classes
-------

.. autoapisummary::

   src.unifile.extractors.audio_extractor._ASR
   src.unifile.extractors.audio_extractor.AudioExtractor


Functions
---------

.. autoapisummary::

   src.unifile.extractors.audio_extractor._probe_media
   src.unifile.extractors.audio_extractor._ensure_wav


Module Contents
---------------

.. py:function:: _probe_media(path: pathlib.Path) -> Dict[str, Any]

   Return a small info dict using ffprobe if available, else {}.


.. py:function:: _ensure_wav(input_path: pathlib.Path) -> pathlib.Path

   Ensure we have a WAV file on disk. If input isn't .wav, convert with ffmpeg.
   Returns the path to a WAV (may be the original if already .wav).


.. py:class:: _ASR

   Lazy ASR model loader that prefers faster-whisper; falls back to openai-whisper.

   Environment overrides:
       UNIFILE_ASR_MODEL   (default: "small")
       UNIFILE_ASR_DEVICE  (e.g., "cuda" or "cpu"; backend-dependent)
       UNIFILE_ASR_COMPUTE_TYPE (faster-whisper only, e.g., "float16","int8_float16")


   .. py:attribute:: _initialized
      :value: False



   .. py:attribute:: _use_fw
      :value: False



   .. py:attribute:: _model
      :value: None



   .. py:method:: _init()
      :classmethod:



   .. py:method:: transcribe(audio_path: pathlib.Path) -> Tuple[str, Dict[str, Any]]
      :classmethod:


      Return (text, meta). Meta includes segments (start,end,text) when available.



.. py:class:: AudioExtractor

   Bases: :py:obj:`unifile.extractors.base.BaseExtractor`


   Audio --> transcript.

   Supported extensions
   --------------------
   wav, mp3, m4a, flac, ogg, webm, aac

   Output Row
   ----------
   - file_type: normalized (e.g., "mp3")
   - unit_type: "audio"
   - unit_id:   "0"
   - content:   transcription text
   - metadata:  {"segments":[...], "probe":{...}} (best-effort)


   .. py:attribute:: supported_extensions
      :value: ['wav', 'mp3', 'm4a', 'flac', 'ogg', 'webm', 'aac']



   .. py:method:: _extract(path: pathlib.Path) -> List[unifile.extractors.base.Row]


